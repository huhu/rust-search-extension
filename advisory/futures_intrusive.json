[
  {
    "advisory": {
      "id": "RUSTSEC-2020-0072",
      "package": "futures-intrusive",
      "title": "GenericMutexGuard allows data races of non-Sync types across threads",
      "description": "`GenericMutexGuard<T>` was given the `Sync` auto trait as long as `T` is `Send`\ndue to its contained members. However, since the guard is supposed to represent\nan **acquired lock** and allows concurrent access to the underlying data from\ndifferent threads, it should only be `Sync` when the underlying data is.\n\nThis is a soundness issue and allows data races, potentially leading to crashes\nand segfaults from safe Rust code.\n\nThe flaw was corrected by adding a `T: Send + Sync` bound for\n`GenericMutexGuard`'s `Sync` trait.\n\nThis bug is [similar to one](https://github.com/rust-lang/rust/issues/41622) in\n`std::sync::Mutex`.",
      "date": "2020-10-31",
      "aliases": [
        "CVE-2020-35915",
        "GHSA-4hjg-cx88-g9f9"
      ],
      "related": [],
      "collection": "crates",
      "categories": [
        "memory-corruption",
        "thread-safety"
      ],
      "keywords": [
        "concurrency"
      ],
      "cvss": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H",
      "informational": "unsound",
      "references": [],
      "source": null,
      "url": "https://github.com/Matthias247/futures-intrusive/issues/53",
      "withdrawn": null,
      "license": "CC0-1.0"
    },
    "affected": null,
    "versions": {
      "patched": [
        ">=0.4.0"
      ],
      "unaffected": []
    }
  }
]