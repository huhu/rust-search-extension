[
  {
    "advisory": {
      "id": "RUSTSEC-2025-0023",
      "package": "tokio",
      "title": "Broadcast channel calls clone in parallel, but does not require `Sync`",
      "description": "The broadcast channel internally calls `clone` on the stored value when\nreceiving it, and only requires `T:Send`. This means that using the broadcast\nchannel with values that are `Send` but not `Sync` can trigger unsoundness if\nthe `clone` implementation makes use of the value being `!Sync`.\n\nThank you to Austin Bonander for finding and reporting this issue.",
      "date": "2025-04-07",
      "aliases": [],
      "related": [],
      "collection": "crates",
      "categories": [
        "memory-corruption"
      ],
      "keywords": [],
      "cvss": null,
      "informational": "unsound",
      "references": [],
      "source": null,
      "url": "https://github.com/tokio-rs/tokio/pull/7232",
      "withdrawn": null,
      "license": "CC0-1.0"
    },
    "affected": null,
    "versions": {
      "patched": [
        ">=1.38.2, <1.39.0",
        ">=1.42.1, <1.43.0",
        ">=1.43.1, <1.44.0",
        ">=1.44.2"
      ],
      "unaffected": [
        "<0.2.5"
      ]
    }
  },
  {
    "advisory": {
      "id": "RUSTSEC-2023-0005",
      "package": "tokio",
      "title": "`tokio::io::ReadHalf<T>::unsplit` is Unsound",
      "description": "`tokio::io::ReadHalf<T>::unsplit` can violate the `Pin` contract\n\nThe soundness issue is described in the [tokio/issues#5372](https://github.com/tokio-rs/tokio/issues/5372)\n\nSpecific set of conditions needed to trigger an issue (a !Unpin type in ReadHalf)\nis unusual, combined with the difficulty of making any arbitrary use-after-free\nexploitable in Rust without doing a lot of careful alignment of data types in\nthe surrounding code.\n\nThe `tokio` feature `io-util` is also required to be enabled to trigger this\nsoundness issue.\n\nThanks to zachs18 reporting the issue to Tokio team responsibly and taiki-e\nand carllerche appropriately responding and fixing the soundness bug.\n\nTokio before 0.2.0 used `futures` 0.1 that did not have `Pin`, so it is not\naffected by this issue.",
      "date": "2023-01-11",
      "aliases": [
        "GHSA-4q83-7cq4-p6wg"
      ],
      "related": [],
      "collection": "crates",
      "categories": [
        "memory-exposure"
      ],
      "keywords": [],
      "cvss": null,
      "informational": "unsound",
      "references": [],
      "source": null,
      "url": "https://github.com/tokio-rs/tokio/issues/5372",
      "withdrawn": null,
      "license": "CC0-1.0"
    },
    "affected": null,
    "versions": {
      "patched": [
        ">=1.18.5, <1.19.0",
        ">=1.20.4, <1.21.0",
        ">=1.24.2"
      ],
      "unaffected": [
        "<0.2.0"
      ]
    }
  },
  {
    "advisory": {
      "id": "RUSTSEC-2023-0001",
      "package": "tokio",
      "title": "reject_remote_clients Configuration corruption",
      "description": "On Windows, configuring a named pipe server with [pipe_mode] will force [ServerOptions]::[reject_remote_clients] as `false`.\n\nThis drops any intended explicit configuration for the [reject_remote_clients] that may have been set as `true` previously.\n\nThe default setting of [reject_remote_clients] is normally `true` meaning the default is also overridden as `false`.\n\n## Workarounds\n\nEnsure that [pipe_mode] is set first after initializing a [ServerOptions]. For example:\n\n```rust\nlet mut opts = ServerOptions::new();\nopts.pipe_mode(PipeMode::Message);\nopts.reject_remote_clients(true);\n```\n\n[ServerOptions]: https://docs.rs/tokio/latest/tokio/net/windows/named_pipe/struct.ServerOptions.html\n[pipe_mode]: https://docs.rs/tokio/latest/tokio/net/windows/named_pipe/struct.ServerOptions.html#method.pipe_mode\n[reject_remote_clients]: https://docs.rs/tokio/latest/tokio/net/windows/named_pipe/struct.ServerOptions.html#method.reject_remote_clients",
      "date": "2023-01-04",
      "aliases": [
        "CVE-2023-22466",
        "GHSA-7rrj-xr53-82p7"
      ],
      "related": [],
      "collection": "crates",
      "categories": [],
      "keywords": [
        "configuration failure"
      ],
      "cvss": null,
      "informational": null,
      "references": [
        "https://github.com/tokio-rs/tokio/pull/5336",
        "https://learn.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-createnamedpipea#pipe_reject_remote_clients"
      ],
      "source": null,
      "url": "https://github.com/tokio-rs/tokio/security/advisories/GHSA-7rrj-xr53-82p7",
      "withdrawn": null,
      "license": "CC0-1.0"
    },
    "affected": {
      "arch": [],
      "os": [
        "windows"
      ],
      "functions": {}
    },
    "versions": {
      "patched": [
        ">=1.18.4, <1.19.0",
        ">=1.20.3, <1.21.0",
        ">=1.23.1"
      ],
      "unaffected": [
        "<1.7.0"
      ]
    }
  },
  {
    "advisory": {
      "id": "RUSTSEC-2021-0124",
      "package": "tokio",
      "title": "Data race when sending and receiving after closing a `oneshot` channel",
      "description": "If a `tokio::sync::oneshot` channel is closed (via the\n[`oneshot::Receiver::close`] method), a data race may occur if the\n`oneshot::Sender::send` method is called while the corresponding\n`oneshot::Receiver` is `await`ed or calling `try_recv`.\n\nWhen these methods are called concurrently on a closed channel, the two halves\nof the channel can concurrently access a shared memory location, resulting in a\ndata race. This has been observed to [cause memory corruption][corruption].\n\nNote that the race only occurs when **both** halves of the channel are used\nafter the `Receiver` half has called `close`. Code where `close` is not used, or where the\n`Receiver` is not `await`ed and `try_recv` is not called after calling `close`,\nis not affected.\n\nSee [tokio#4225][issue] for more details.\n\n[corruption]: https://github.com/tokio-rs/tokio/issues/4225#issuecomment-967434847\n[issue]: https://github.com/tokio-rs/tokio/issues/4225\n[`oneshot::Receiver::close`]: https://docs.rs/tokio/1.14.0/tokio/sync/oneshot/struct.Receiver.html#method.close",
      "date": "2021-11-16",
      "aliases": [
        "CVE-2021-45710",
        "GHSA-fg7r-2g4j-5cgr"
      ],
      "related": [],
      "collection": "crates",
      "categories": [
        "memory-corruption",
        "thread-safety"
      ],
      "keywords": [
        "race condition"
      ],
      "cvss": null,
      "informational": null,
      "references": [],
      "source": null,
      "url": "https://github.com/tokio-rs/tokio/issues/4225",
      "withdrawn": null,
      "license": "CC0-1.0"
    },
    "affected": {
      "arch": [],
      "os": [],
      "functions": {
        "tokio::sync::oneshot::Receiver::close": [
          "<=1.13.0, >=0.1.14"
        ]
      }
    },
    "versions": {
      "patched": [
        ">=1.8.4, <1.9.0",
        ">=1.13.1"
      ],
      "unaffected": [
        "<0.1.14"
      ]
    }
  },
  {
    "advisory": {
      "id": "RUSTSEC-2021-0072",
      "package": "tokio",
      "title": "Task dropped in wrong thread when aborting `LocalSet` task",
      "description": "When aborting a task with `JoinHandle::abort`, the future is dropped in the\nthread calling abort if the task is not currently being executed. This is\nincorrect for tasks spawned on a `LocalSet`.\n\nThis can easily result in race conditions as many projects use `Rc` or `RefCell`\nin their Tokio tasks for better performance.\n\nSee [tokio#3929][issue] for more details.\n\n[issue]: https://github.com/tokio-rs/tokio/issues/3929",
      "date": "2021-07-07",
      "aliases": [
        "CVE-2021-38191",
        "GHSA-2grh-hm3w-w7hv"
      ],
      "related": [],
      "collection": "crates",
      "categories": [
        "memory-corruption"
      ],
      "keywords": [
        "race condition",
        "send"
      ],
      "cvss": null,
      "informational": null,
      "references": [],
      "source": null,
      "url": "https://github.com/tokio-rs/tokio/issues/3929",
      "withdrawn": null,
      "license": "CC0-1.0"
    },
    "affected": {
      "arch": [],
      "os": [],
      "functions": {
        "tokio::task::JoinHandle::abort": [
          "<=1.8.0, >=0.3.0"
        ]
      }
    },
    "versions": {
      "patched": [
        ">=1.5.1, <1.6.0",
        ">=1.6.3, <1.7.0",
        ">=1.7.2, <1.8.0",
        ">=1.8.1"
      ],
      "unaffected": [
        "<0.3.0"
      ]
    }
  }
]