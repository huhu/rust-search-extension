[
  {
    "advisory": {
      "id": "RUSTSEC-2021-0122",
      "package": "flatbuffers",
      "title": "Generated code can read and write out of bounds in safe code",
      "description": "Code generated by flatbuffers' compiler is `unsafe` but not marked as such.\nSee https://github.com/google/flatbuffers/issues/6627 for details.\n\nFor example, if generated code is used to decode malformed or untrusted input,\nundefined behavior (and thus security vulnerabilities) is possible even without\nthe use of the `unsafe` keyword, [violating the the meaning of \"safe\"](https://doc.rust-lang.org/std/keyword.unsafe.html#the-different-meanings-of-unsafe) code;\n\nAll users that use generated code by `flatbuffers` compiler are recommended to:\n1. not expose flatbuffer generated code as part of their public APIs\n2. audit their code and look for any usage of `follow`, `push`, or any method that uses them\n   (e.g. `self_follow`).\n3. Carefully go through the crates' documentation to understand which \"safe\" APIs are not\n   intended to be used.",
      "date": "2021-10-31",
      "aliases": [
        "GHSA-3jch-9qgp-4844"
      ],
      "related": [],
      "collection": "crates",
      "categories": [],
      "keywords": [],
      "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "informational": null,
      "references": [],
      "source": null,
      "url": "https://github.com/google/flatbuffers/issues/6627",
      "withdrawn": null,
      "license": "CC0-1.0"
    },
    "affected": null,
    "versions": {
      "patched": [
        ">=22.9.29"
      ],
      "unaffected": []
    }
  },
  {
    "advisory": {
      "id": "RUSTSEC-2020-0009",
      "package": "flatbuffers",
      "title": "`read_scalar` and `read_scalar_at` allow transmuting values without `unsafe` blocks",
      "description": "The `read_scalar` and `read_scalar_at` functions are unsound\nbecause they allow transmuting values without `unsafe` blocks.\n\nThe following example shows how to create a dangling reference:\n\n```\nfn main() {\n    #[derive(Copy, Clone, PartialEq, Debug)]\n    struct S(&'static str);\n    impl flatbuffers::EndianScalar for S {\n        fn to_little_endian(self) -> Self { self }\n        fn from_little_endian(self) -> Self { self }\n    }\n    println!(\"{:?}\", flatbuffers::read_scalar::<S>(&[1; std::mem::size_of::<S>()]));\n}\n```",
      "date": "2020-04-11",
      "aliases": [
        "CVE-2020-35864",
        "GHSA-c9h5-hf8r-m97x"
      ],
      "related": [],
      "collection": "crates",
      "categories": [],
      "keywords": [],
      "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "informational": null,
      "references": [],
      "source": null,
      "url": "https://github.com/google/flatbuffers/issues/5825",
      "withdrawn": null,
      "license": "CC0-1.0"
    },
    "affected": {
      "arch": [],
      "os": [],
      "functions": {
        "flatbuffers::read_scalar": [
          ">=0.4.0"
        ],
        "flatbuffers::read_scalar_at": [
          ">=0.4.0"
        ]
      }
    },
    "versions": {
      "patched": [
        ">=2.0.0"
      ],
      "unaffected": [
        "<0.4.0"
      ]
    }
  },
  {
    "advisory": {
      "id": "RUSTSEC-2019-0028",
      "package": "flatbuffers",
      "title": "Unsound `impl Follow for bool`",
      "description": "The implementation of `impl Follow for bool` allows to reinterpret arbitrary bytes as a `bool`.\n\nIn Rust `bool` has stringent requirements for its in-memory representation. Use of this function\nallows to violate these requirements and invoke undefined behaviour in safe code.",
      "date": "2019-10-20",
      "aliases": [
        "CVE-2019-25004",
        "GHSA-gx73-2498-r55c"
      ],
      "related": [],
      "collection": "crates",
      "categories": [],
      "keywords": [],
      "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "informational": null,
      "references": [],
      "source": null,
      "url": "https://github.com/google/flatbuffers/issues/5530",
      "withdrawn": null,
      "license": "CC0-1.0"
    },
    "affected": {
      "arch": [],
      "os": [],
      "functions": {
        "flatbuffers::Follow::follow": [
          ">=0.4.0",
          "<=0.6.0"
        ]
      }
    },
    "versions": {
      "patched": [
        ">=0.6.1"
      ],
      "unaffected": [
        "<0.4.0"
      ]
    }
  }
]