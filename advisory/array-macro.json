[
  {
    "advisory": {
      "id": "RUSTSEC-2020-0161",
      "package": "array-macro",
      "title": "`array!` macro is unsound in presence of traits that implement methods it calls internally",
      "description": "Affected versions of this crate called some methods using auto-ref. The affected code looked like this.\n\n```rust\nlet mut arr = $crate::__core::mem::MaybeUninit::uninit();\nlet mut vec = $crate::__ArrayVec::<T>::new(arr.as_mut_ptr() as *mut T);\n```\n\nIn this case, the problem is that `as_mut_ptr` is a method of `&mut MaybeUninit`, not `MaybeUninit`. This made it possible for traits to hijack the method calls in order to cause unsoundness.\n\n```rust\ntrait AsMutPtr<T> {\n    fn as_mut_ptr(&self) -> *mut T;\n}\nimpl<T> AsMutPtr<T> for std::mem::MaybeUninit<T> {\n    fn as_mut_ptr(&self) -> *mut T {\n        std::ptr::null_mut()\n    }\n}\narray![0; 1];\n```\n\nThe flaw was corrected by explicitly referencing variables in macro body in order to avoid auto-ref.",
      "date": "2020-05-07",
      "aliases": [],
      "related": [],
      "collection": "crates",
      "categories": [
        "memory-corruption"
      ],
      "keywords": [],
      "cvss": null,
      "informational": "unsound",
      "references": [],
      "source": null,
      "url": "https://gitlab.com/KonradBorowski/array-macro/-/commit/01940637dd8f3bfeeee3faf9639fa9ae52f19f4d",
      "withdrawn": null
    },
    "affected": null,
    "versions": {
      "patched": [
        ">=1.0.5"
      ],
      "unaffected": [
        "<0.1.2"
      ]
    }
  },
  {
    "advisory": {
      "id": "RUSTSEC-2022-0017",
      "package": "array-macro",
      "title": "`array!` macro is unsound when its length is impure constant",
      "description": "Affected versions of this crate did substitute the array length provided by an user at compile-time multiple times.\n\nWhen an impure constant expression is passed as an array length (such as a result of an impure procedural macro), this can result in the initialization of an array with uninitialized types, which in turn can allow an attacker to execute arbitrary code.\n\nThe flaw was corrected in commit [d5b63f72](https://gitlab.com/KonradBorowski/array-macro/-/commit/d5b63f72090f3809c21ac28f9cfd84f12559bf7d) by making sure that array length is substituted just once.",
      "date": "2022-04-27",
      "aliases": [],
      "related": [],
      "collection": "crates",
      "categories": [
        "code-execution",
        "memory-corruption",
        "memory-exposure"
      ],
      "keywords": [],
      "cvss": null,
      "informational": "unsound",
      "references": [],
      "source": null,
      "url": "https://gitlab.com/KonradBorowski/array-macro/-/issues/5",
      "withdrawn": null
    },
    "affected": null,
    "versions": {
      "patched": [
        ">=2.1.2"
      ],
      "unaffected": [
        "<2.1.0"
      ]
    }
  }
]