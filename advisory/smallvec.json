[
  {
    "advisory": {
      "id": "RUSTSEC-2021-0003",
      "package": "smallvec",
      "title": "Buffer overflow in SmallVec::insert_many",
      "description": "A bug in the `SmallVec::insert_many` method caused it to allocate a buffer that was smaller than needed.  It then wrote past the end of the buffer, causing a buffer overflow and memory corruption on the heap.\n\nThis bug was only triggered if the iterator passed to `insert_many` yielded more items than the lower bound returned from its `size_hint` method.\n \nThe flaw was corrected in smallvec 0.6.14 and 1.6.1, by ensuring that additional space is always reserved for each item inserted.  The fix also simplified the implementation of `insert_many` to use less unsafe code, so it is easier to verify its correctness.\n\nThank you to Yechan Bae (@Qwaz) and the Rust group at Georgia Techâ€™s SSLab for finding and reporting this bug.",
      "date": "2021-01-08",
      "aliases": [
        "CVE-2021-25900",
        "GHSA-43w2-9j62-hq99"
      ],
      "related": [],
      "collection": "crates",
      "categories": [
        "memory-corruption"
      ],
      "keywords": [
        "buffer-overflow",
        "heap-overflow",
        "unsound"
      ],
      "cvss": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "informational": null,
      "references": [],
      "source": null,
      "url": "https://github.com/servo/rust-smallvec/issues/252",
      "withdrawn": null,
      "license": "CC0-1.0"
    },
    "affected": {
      "arch": [],
      "os": [],
      "functions": {
        "smallvec::SmallVec::insert_many": [
          ">=0.6.3, <0.6.14",
          ">=1.0.0, <1.6.1"
        ]
      }
    },
    "versions": {
      "patched": [
        ">=0.6.14, <1.0.0",
        ">=1.6.1"
      ],
      "unaffected": [
        "<0.6.3"
      ]
    }
  },
  {
    "advisory": {
      "id": "RUSTSEC-2019-0012",
      "package": "smallvec",
      "title": "Memory corruption in SmallVec::grow()",
      "description": "Attempting to call `grow` on a spilled SmallVec with a value less than the current capacity causes corruption of memory allocator data structures.\n\nAn attacker that controls the value passed to `grow` may exploit this flaw to obtain memory contents or gain remote code execution.\n\nCredits to @ehuss for discovering, reporting and fixing the bug.",
      "date": "2019-07-19",
      "aliases": [
        "CVE-2019-15554",
        "GHSA-69gw-hgj3-45m7"
      ],
      "related": [],
      "collection": "crates",
      "categories": [
        "code-execution",
        "memory-corruption"
      ],
      "keywords": [],
      "cvss": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "informational": null,
      "references": [],
      "source": null,
      "url": "https://github.com/servo/rust-smallvec/issues/149",
      "withdrawn": null,
      "license": "CC0-1.0"
    },
    "affected": {
      "arch": [],
      "os": [],
      "functions": {
        "smallvec::SmallVec::grow": [
          "<0.6.10, >=0.6.3"
        ]
      }
    },
    "versions": {
      "patched": [
        ">=0.6.10"
      ],
      "unaffected": [
        "<0.6.3"
      ]
    }
  },
  {
    "advisory": {
      "id": "RUSTSEC-2019-0009",
      "package": "smallvec",
      "title": "Double-free and use-after-free in SmallVec::grow()",
      "description": "Attempting to call `grow` on a spilled SmallVec with a value equal to the current capacity causes it to free the existing data. This performs a double free immediately and may lead to use-after-free on subsequent accesses to the SmallVec contents.\n\nAn attacker that controls the value passed to `grow` may exploit this flaw to obtain memory contents or gain remote code execution.\n\nCredits to @ehuss for discovering, reporting and fixing the bug.",
      "date": "2019-06-06",
      "aliases": [
        "CVE-2019-15551",
        "GHSA-mm7v-vpv8-xfc3"
      ],
      "related": [],
      "collection": "crates",
      "categories": [],
      "keywords": [
        "double free",
        "use after free",
        "arbitrary code execution"
      ],
      "cvss": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "informational": null,
      "references": [],
      "source": null,
      "url": "https://github.com/servo/rust-smallvec/issues/148",
      "withdrawn": null,
      "license": "CC0-1.0"
    },
    "affected": {
      "arch": [],
      "os": [],
      "functions": {
        "smallvec::SmallVec::grow": [
          "<0.6.10, >=0.6.5"
        ]
      }
    },
    "versions": {
      "patched": [
        ">=0.6.10"
      ],
      "unaffected": [
        "<0.6.5"
      ]
    }
  },
  {
    "advisory": {
      "id": "RUSTSEC-2018-0018",
      "package": "smallvec",
      "title": "smallvec creates uninitialized value of any type",
      "description": "Affected versions of this crate called `mem::uninitialized()` to create values of a user-supplied type `T`.\nThis is unsound e.g. if `T` is a reference type (which must be non-null and thus may not remain uninitialized).\n \nThe flaw was corrected by avoiding the use of `mem::uninitialized()`, using `MaybeUninit` instead.",
      "date": "2018-09-25",
      "aliases": [
        "CVE-2018-25023",
        "GHSA-55m5-whcv-c49c",
        "GHSA-66p5-j55p-32r9"
      ],
      "related": [],
      "collection": "crates",
      "categories": [],
      "keywords": [],
      "cvss": null,
      "informational": "unsound",
      "references": [],
      "source": null,
      "url": "https://github.com/servo/rust-smallvec/issues/126",
      "withdrawn": null,
      "license": "CC0-1.0"
    },
    "affected": null,
    "versions": {
      "patched": [
        ">=0.6.13"
      ],
      "unaffected": []
    }
  },
  {
    "advisory": {
      "id": "RUSTSEC-2018-0003",
      "package": "smallvec",
      "title": "Possible double free during unwinding in SmallVec::insert_many",
      "description": "If an iterator passed to `SmallVec::insert_many` panicked in `Iterator::next`,\ndestructors were run during unwinding while the vector was in an inconsistent\nstate, possibly causing a double free (a destructor running on two copies of\nthe same value).\n\nThis is fixed in smallvec 0.6.3 by ensuring that the vector's length is not\nupdated to include moved items until they have been removed from their\noriginal positions.  Items may now be leaked if `Iterator::next` panics, but\nthey will not be dropped more than once.\n\nThank you to @Vurich for reporting this bug.",
      "date": "2018-07-19",
      "aliases": [
        "CVE-2018-20991",
        "GHSA-rxr4-x558-x7hw"
      ],
      "related": [],
      "collection": "crates",
      "categories": [],
      "keywords": [
        "memory-corruption"
      ],
      "cvss": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "informational": null,
      "references": [],
      "source": null,
      "url": "https://github.com/servo/rust-smallvec/issues/96",
      "withdrawn": null,
      "license": "CC0-1.0"
    },
    "affected": null,
    "versions": {
      "patched": [
        ">=0.6.3",
        "^0.3.4",
        "^0.4.5",
        "^0.5.1"
      ],
      "unaffected": [
        "<0.3.2"
      ]
    }
  }
]